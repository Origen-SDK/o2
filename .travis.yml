# Somewhat based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

language: rust
#sudo: required

env:
  global:
    - CRATE_NAME=origen

addons:
  apt:
    packages:
      - musl-tools

rust: nightly

matrix:
  include:

  - name: Linux Backend
    env: TARGET=x86_64-unknown-linux-musl PYTHON_VERSION=3.6 O2_REGRESSION=BACKEND
  - name: Linux Frontend Python 3.6
    env: TARGET=x86_64-unknown-linux-gnu PYTHON_VERSION=3.6 O2_REGRESSION=FRONTEND
  - name: Linux Frontend Python 3.7
    env: TARGET=x86_64-unknown-linux-gnu PYTHON_VERSION=3.7 O2_REGRESSION=FRONTEND
  - name: Linux Frontend Python 3.8
    env: TARGET=x86_64-unknown-linux-gnu PYTHON_VERSION=3.8 O2_REGRESSION=FRONTEND
  - name: Windows Backend
    os: windows
    env: TARGET=x86_64-pc-windows-gnu PYTHON_VERSION=3.6.8 O2_REGRESSION=BACKEND
  - name: Windows Frontend Python 3.6
    os: windows
    env: TARGET=x86_64-pc-windows-gnu PYTHON_VERSION=3.6.8 O2_REGRESSION=FRONTEND
  - name: Windows Frontend Python 3.7
    os: windows
    env: TARGET=x86_64-pc-windows-gnu PYTHON_VERSION=3.7.6 O2_REGRESSION=FRONTEND
  - name: Windows Frontend Python 3.8
    os: windows
    env: TARGET=x86_64-pc-windows-gnu PYTHON_VERSION=3.8.1 O2_REGRESSION=FRONTEND

install:
  - cd rust
  - set -e
  - rustup self update
  - bash ../ci/install.sh

script:
  - bash ../ci/script.sh

after_script: set +e

before_deploy:
  - bash ../ci/before_deploy.sh

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  api_key:
    secure: JEUZUlTQ0E4GNJNIHNDK2v8l0Zmj8i79WAqPbZdVjnSsEovgO3gil6zaAub4sjK8OcZ//Av0dauY5+M95oJ9tbWTy1jRkZ4/8QOmGk5vjusAHrL4du7EAE7d8ZzxFTSH8h2kN0+6Tz8V8wZBlxMHX6zXyf452XJN87066rqGxdOrhW/ETU8giP5k9PlE9JBqB+Y1mE0Isxb/mKwxP8QLvSn3LnGKOsTNsA9wI+qTLZ4yzeZC21bawfJTlb5mPCSpKTkX2rc7LEhneLgvrUpBnNApOZxZG21WkRozDTdBH5jgtPKGtH8IFcItd0Y1/C3zmiyyPIO+hw34PTnFw9MKPW97oVmXi6CWRBbY0NCsbZ9EZ+JUiqOKZ24sAuvLb0yJBc7RRm+En/bifHf3l/Tfqqn/Fv4irXbMi2A0igM0G346y42YKGu6ORummSHXh6GMY+cPq1IGG6UWnRZyM2lV68mKmqWmHZGcy3r69/h/brs03hXlWNAC7eXVafM/ssnhJL/ohpSz4HsZaAWR8LA6ZBxjygqAMUins7Mw3pPbQJX78ycN1ODrgS+vk7irFfPckxf9QWMRqPaXH8C7mgIjhUQxI6Zy6cri7EnayBPKgMp4S4bMVELVV9So+0pZEvWcmJtjuCfp15znnPOZ174cWWqaoW+vw4dSYDYIJ+oK41U=
    
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $O2_REGRESSION = BACKEND
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

#branches:
#  only:
#    # release tags
#    - /^v\d+\.\d+\.\d+.*$/
#    - master

notifications:
  email:
    on_success: never
