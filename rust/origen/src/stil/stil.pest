field = { (ASCII_DIGIT | "." | "-")+ }

stil_source = { SOI ~ stil_source_items+ ~ EOI }

stil_source_items = {
    S | N | stil_version  | header_block | signals_block | signal_groups_block |
    timing_block | pattern_exec_block | pattern_burst_block
}

stil_version = { "STIL" ~ ASCII_DIGIT ~ "." ~ ASCII_DIGIT ~ EOS }

//############################################################################
//# 6.13 and 6.14. Timing and Signal Expressions
//############################################################################

sigref_expr = { name | ("'" ~ expression_subset ~ "'") }
expression_subset = { add | subtract | name | paren_expression }
expression = { add | subtract | multiply | divide | number_with_unit | number | name | paren_expression }
terminal = { number_with_unit | number | name | paren_expression }
add = { terminal ~ "+" ~ expression }
subtract = { terminal ~ "-" ~ expression }
multiply = { terminal ~ "*" ~ expression }
divide = { terminal ~ "/" ~ expression }
paren_expression = { "(" ~ expression ~ ")" }
time_expr = { "'" ~ expression ~ "'" }
number_with_unit = { number+ ~ engineering_prefix? ~ si_unit }
si_unit = { "A" | "Cel" | "F" | "H" | "Hz" | "m" | "Ohm" | "s" | "W" | "V" }
engineering_prefix = { "E" | "P" | "T" | "G" | "M" | "k" | "m" | "u" | "n" | "p" | "f" | "a" }

//############################################################################
//# 9. Header Block
//############################################################################

header_block = { "Header" ~ "{" ~ title? ~ date? ~ source? ~ history? ~ "}" }
title = { "Title" ~ string ~ EOS }
date = { "Date" ~ string ~ EOS }
source = { "Source" ~ string ~ EOS }
history = { "History" ~ "{" ~ annotation* ~ "}" }
annotation = { "Ann" ~ "{*" ~ (!"*}" ~ ANY)* ~ "*}" }

//############################################################################
//# 14. Signals Block
//############################################################################

signals_block = { "Signals" ~ "{" ~ signal* ~ "}" }
signal = {
    (name ~ ("InOut" | "Out" | "In" | "Supply" | "Pseudo") ~ EOS) |
    (name ~ ("InOut" | "Out" | "In" | "Supply" | "Pseudo") ~
    ("{" ~ termination? ~ default_state? ~ base? ~ alignment? ~ scan_in? ~ scan_out? ~ data_bit_count? ~ "}" ))
}

termination = {
    "Termination" ~ ("TerminateHigh" | "TerminateLow" | "TerminateOff" | "TerminateUknown") ~ EOS
}

default_state = {
    "DefaultState" ~ ("U" | "D" | "Z" | "ForceUp" | "ForceDown" | "ForceOff") ~ EOS
}

base = { "Base" ~ ("Hex" | "Dec") ~ waveform_character_list ~ EOS }

alignment = { "Alignment" ~ ("MSB" | "LSB") ~ EOS }
scan_in = { "ScanIn" ~ integer ~ EOS }
scan_out = { "ScanOut" ~ integer ~ EOS }
data_bit_count = { "DataBitCount" ~ integer ~ EOS }
waveform_character_list = @{ ASCII_ALPHANUMERIC+ }

//############################################################################
//# 15. SignalGroups Block
//############################################################################

signal_groups_block = { "SignalGroups" ~ name? ~ "{" ~ signal_group* ~ "}" }
signal_group = {
    (name ~ "=" ~ sigref_expr ~ EOS) |
    (name ~ "=" ~ sigref_expr ~ 
       ("{" ~ termination? ~ default_state? ~ base? ~ alignment? ~ scan_in? ~ scan_out? ~ data_bit_count? ~ "}" ))
}

//############################################################################
//# 16. PatternExec Block
//############################################################################

pattern_exec_block = {
    "PatternExec" ~ name? ~ "{" ~ category* ~ selector* ~ timing? ~ pattern_burst? ~ "}"
}
category = { "Category" ~ name ~ EOS }
selector = { "Selector" ~ name ~ EOS }
timing = { "Timing" ~ name ~ EOS }
pattern_burst = { "PatternBurst" ~ name ~ EOS }

//############################################################################
//# 17. PatternBurst Block
//############################################################################

pattern_burst_block = {
    "PatternBurst" ~ name ~ "{" ~ signal_groups* ~ macro_defs* ~ procedures? ~ scan_structures? ~ start? ~
        stop? ~ termination_block* ~ pat_list+ ~ "}"
}
signal_groups = { "SignalGroups" ~ name ~ EOS }
macro_defs = { "MacroDefs" ~ name ~ EOS }
procedures = { "Procedures" ~ name ~ EOS }
scan_structures = { "ScanStructures" ~ name ~ EOS }
start = { "Start" ~ name ~ EOS }
stop = { "Stop" ~ name ~ EOS }
termination_block = { "Termination" ~ "{" ~ termination_item* ~ "}" }
termination_item = {
    sigref_expr ~ ("TerminateHigh" | "TerminateLow" | "TerminateOff" | "TerminateUknown") ~ EOS
}
pat_list = { "PatList" ~ "{" ~ pat_list_item* ~ "}" }
pat_list_item = {
    name ~ (EOS | ("{" ~ signal_groups* ~ macro_defs* ~ procedures? ~ scan_structures? ~ start? ~
                       stop? ~ termination_block* ~ "}"))
}

//############################################################################
//# 18. Timing block
//############################################################################

timing_block = { "Timing" ~ name? ~ "{" ~ signal_groups_ref* ~ waveform_table* ~ "}" }
signal_groups_ref = { "SignalGroups" ~ name ~ EOS }
waveform_table = {
    "WaveformTable" ~ name ~ "{" ~ period? ~ inherit_waveform_table* ~ sub_waveforms? ~ waveforms ~ "}"
}
period = { "Period" ~ time_expr ~ EOS }
inherit_waveform_table = { "InheritWaveformTable" ~ name ~ EOS }
inherit_waveform = { "InheritWaveform" ~ name ~ EOS }
inherit_waveform_wfc = { "InheritWaveform" ~ name_wfc ~ EOS }
name_wfc = { ((name_segment ~ ".")+ ~ wfc_list) | wfc_list }
sub_waveforms = { "SubWaveforms" } // Not implemented yet
waveforms = { "Waveforms" ~ "{" ~ waveform* ~ "}" }
waveform = { sigref_expr ~ "{" ~ inherit_waveform* ~ wfc_definition* ~ "}" }
wfc_char = { ASCII_ALPHANUMERIC }
wfc_list = @{ wfc_char+ }
wfc_definition = { wfc_list ~ "{" ~ inherit_waveform_wfc* ~ event* ~ "}" }
event = { event_label? ~ time_expr? ~ event_list? ~ EOS }
event_label = { name ~ ":" }
event_char = {
    "D" | "U" | "Z" | "P" | "L" | "H" | "X" | "x" | "T" | "V" | "l" | "h" | "t" | "v" | "R" | "G" |
    "Q" | "M" | "N" | "A" | "B" | "F" | "?"
}
event_list = { event_char ~ ("/" ~ event_char)* }

//############################################################################
//# Identifiers
//############################################################################

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
name = @{ ((name_segment ~ ".")+ ~ name_segment) | name_segment }
name_segment = { simple_identifier | escaped_identifier }
simple_identifier = @{ (letter | underline) ~ simple_character* }
simple_character = { letter | digit | underline }
letter = { upper_case_letter | lower_case_letter }
upper_case_letter = { ASCII_ALPHA_UPPER }
lower_case_letter = { ASCII_ALPHA_LOWER }
underline = { "_" }
escaped_identifier = @{ "\"" ~ escaped_character+ ~ "\"" }
escaped_character = { simple_character | special_character | whitespace_character }
special_character = {
    "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "+" |
    "+" | "|" | "`" | "~" | "{" | "[" | "}" | "]" | ":" | ";" | "'" | "," |
    "<" | "." | ">" | "/" | "?" | "\\"
}
whitespace_character = { " " | "\t" | "\n" }

//#############################################################################
//# Numbers
//#############################################################################

digit = { ASCII_DIGIT }
hexdigit = { ASCII_HEX_DIGIT }
hex_number = @{ hexdigit+ }
integer = @{ digit+ }
signed_integer = @{ integer | ("-" ~ integer) }
number = {
    signed_integer | (signed_integer ~ "." ~ integer) | (signed_integer ~ "e" ~ signed_integer) |
    (signed_integer ~ "." ~ integer ~ "e" ~ signed_integer)
}

//#############################################################################
//# Comments and Whitespace
//#############################################################################
EOS = _{ ";" }

block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

one_line_comment = _{ "//" ~ (!N ~ ANY)* }

space = _{ " " | "\t" }

// Optional space, including newlines and comments
s = _{ (space | N | one_line_comment | block_comment)* }

// Required space, including newlines and comments
S = _{ (space | N | one_line_comment | block_comment)+ }

// Optional end of line
n = _{ NEWLINE? }

// Required end of line
N = _{ NEWLINE }

// For Pest implicit whitespace insertion
WHITESPACE = _{ space | NEWLINE }
COMMENT = _{ block_comment | one_line_comment }