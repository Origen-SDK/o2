// ******************************************************************************************
// Generated
//   Time: 2020-09-29 22:57:55.115426300 -05:00
//   By: nxa13790
//   Command: origen generate \\?\C:\Users\nxa13790\Documents\origen\o2\test_apps\python_app\example\patterns\swd_workout.py
// ******************************************************************************************
// Workspace
//   Environment
//     OS: Windows Unknown
//     Mode: development
//     Targets
//         C:\Users\nxa13790\Documents\origen\o2\test_apps\python_app\targets\dut\eagle.py
//         C:\Users\nxa13790\Documents\origen\o2\test_apps\python_app\targets\tester\v93k_smt7.py
//         C:\Users\nxa13790\Documents\origen\o2\test_apps\python_app\targets\tester\j750.py
//   Application
//     Local Path: C:\Users\nxa13790\Documents\origen\o2\test_apps\python_app
//   Origen Core
//     Version: 2.0.0-pre2
//     Executable Path: C:\Users\nxa13790\AppData\Local\Programs\Python\Python38\python.exe
// ******************************************************************************************
// Header Comments
//   From the Application
//     Hello pattern from the application!
// ******************************************************************************************
vector ($tset, reset, swdclk, swdio)
{
start_label pattern_st:
repeat 100 > simple X 0 X ;
// Reset SWD
// SWD: Line Reset
repeat 50 > simple X 1 1 ;
repeat 2 > simple X 1 X ;
// Write AP to 0xCECE_ECEC
// SWD: Write AP - AP: 0, Data: 0xCECEECEC
// SWD: Header: host -> target (A: 0, ap_access: 1, verify: 0) 
repeat 2 > simple X 1 1 ;
repeat 3 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Ok: target -> host
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
 > simple X 1 X ;
// SWD: Drive data
repeat 2 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
// SWD: Drive data's parity bit
 > simple X 1 0 ;
repeat 10 > simple X 1 0 ;
// Verify AP
// SWD: Verify AP - AP: 0, Data: 0xCECEECEC
// SWD: Header: host -> target (A: 0, ap_access: 1, verify: 1) 
repeat 3 > simple X 1 1 ;
repeat 4 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Ok: target -> host
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
// SWD: Verify data
repeat 2 > simple X 1 L ;
repeat 2 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
repeat 2 > simple X 1 L ;
repeat 2 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
repeat 2 > simple X 1 L ;
repeat 2 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
repeat 2 > simple X 1 L ;
repeat 2 > simple X 1 H ;
// SWD: Ignoring parity bit on SWD READ operation
repeat 2 > simple X 1 X ;
repeat 10 > simple X 1 X ;
// Write DP to 0x1234_ABCD
// SWD: Write DP - DP: 0, Data: 0x1234ABCD
// SWD: Header: host -> target (A: 0, ap_access: 0, verify: 0) 
 > simple X 1 1 ;
repeat 6 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Ok: target -> host
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
 > simple X 1 X ;
// SWD: Drive data
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
repeat 4 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 3 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 3 > simple X 1 0 ;
// SWD: Drive data's parity bit
 > simple X 1 1 ;
repeat 10 > simple X 1 1 ;
// Verify DP
// SWD: Verify DP - DP: 0, Data: 0x1234ABCD
// SWD: Header: host -> target (A: 0, ap_access: 0, verify: 1) 
 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Ok: target -> host
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
// SWD: Verify data
 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
repeat 2 > simple X 1 L ;
repeat 4 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
repeat 3 > simple X 1 L ;
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
 > simple X 1 H ;
repeat 3 > simple X 1 L ;
// SWD: Ignoring parity bit on SWD READ operation
repeat 2 > simple X 1 X ;
repeat 10 > simple X 1 X ;
// Write AP with AP address expecting OK response
// SWD: Write AP - AP: 4, Data: 0xBADC0DE
// SWD: Header: host -> target (A: 1, ap_access: 1, verify: 0) 
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 3 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Ok: target -> host
 > simple X 1 H ;
repeat 2 > simple X 1 L ;
 > simple X 1 X ;
// SWD: Drive data
 > simple X 1 0 ;
repeat 4 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 6 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
repeat 4 > simple X 1 0 ;
// SWD: Drive data's parity bit
 > simple X 1 0 ;
repeat 10 > simple X 1 0 ;
// Verify AP with AP address, expecting WAIT response, and verifying the parity bit
// SWD: Verify AP - AP: 8, Data: 0xBADC0DE
// SWD: Header: host -> target (A: 2, ap_access: 1, verify: 1) 
repeat 3 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Wait: target -> host
 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
// SWD: Verify data
 > simple X 1 L ;
repeat 4 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
repeat 6 > simple X 1 L ;
repeat 3 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
repeat 4 > simple X 1 L ;
// SWD: Expecting parity bit of 0
 > simple X 1 L ;
 > simple X 1 X ;
repeat 10 > simple X 1 X ;
// Write DP with DP address expecting FAULT response
// SWD: Write DP - DP: 12, Data: 0xC0DE1BAD
// SWD: Header: host -> target (A: 3, ap_access: 0, verify: 0) 
 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 2 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Acknowledge Fault: target -> host
repeat 2 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 X ;
// SWD: Drive data
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 3 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 4 > simple X 1 0 ;
repeat 4 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
repeat 6 > simple X 1 0 ;
repeat 2 > simple X 1 1 ;
// SWD: Drive data's parity bit
 > simple X 1 1 ;
repeat 10 > simple X 1 1 ;
// Verify DP with DP address, ignoring the target's acknowledgement, and verifying the parity bit
// SWD: Verify DP - DP: 12, Data: 0xC0DE1BAD
// SWD: Header: host -> target (A: 3, ap_access: 0, verify: 1) 
 > simple X 1 1 ;
 > simple X 1 0 ;
repeat 4 > simple X 1 1 ;
 > simple X 1 0 ;
 > simple X 1 1 ;
 > simple X 1 X ;
// SWD: Do not check acknowledgement
repeat 3 > simple X 1 X ;
// SWD: Verify data
 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
 > simple X 1 L ;
 > simple X 1 H ;
 > simple X 1 L ;
repeat 3 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
repeat 4 > simple X 1 L ;
repeat 4 > simple X 1 H ;
 > simple X 1 L ;
repeat 2 > simple X 1 H ;
repeat 6 > simple X 1 L ;
repeat 2 > simple X 1 H ;
// SWD: Ignoring parity bit on SWD READ operation
repeat 2 > simple X 1 X ;
repeat 10 > simple X 1 X ;
// Reset SWD
// SWD: Line Reset
repeat 50 > simple X 1 1 ;
repeat 2 > simple X 1 X ;
repeat 10 > simple X 1 X ;
end_module > simple X 1 X ;
}
