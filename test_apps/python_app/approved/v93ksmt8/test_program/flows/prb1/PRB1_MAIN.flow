flow PRB1_MAIN {
    in G100_RAN = -1;
    in ERASE_RAN_1_RAN = -1;
    in DO_ERASE = -1;
    in ERASE_PASSED_4_FAILED = -1;
    in ERASE_FAILED_1_FAILED = -1;
    in ERASE_PASSED_2_PASSED = -1;
    in ERASE_FAILED_3_PASSED = -1;
    in NO_EXTRA_ERASE = -1;
    in ERASE_FAILED_4_PASSED = -1;
    in JOB = "";
    in ERASE_PASSED_1_PASSED = -1;
    in ERASE_PASSED_3_FAILED = -1;
    in ERASE_FAILED_2_FAILED = -1;
    in ERASE_RAN_2_RAN = -1;
    in ERASE_RAN_4_RAN = -1;
    in ERASE_RAN_3_RAN = -1;
    in G200_FAILED = -1;
    in USB_XCVR_CZ = -1;

    out ERASE_RAN_1_RAN = -1;
    out ERASE_RAN_2_RAN = -1;
    out ERASE_RAN_3_RAN = -1;
    out ERASE_RAN_4_RAN = -1;
    out G100_RAN = -1;

    setup {
        suite another_not_p1_or_p2_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite cc_test_0 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite cc_test_1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite cc_test_2 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_10 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_11 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_12 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_13 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_14 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_15 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_16 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_17 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_18 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_19 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_2 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_20 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_21 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_22 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_23 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_3 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_4 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_5 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_6 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_7 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_8 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite erase_all_9 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read0_ckbd calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_10 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_11 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_12 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_13 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_14 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_15 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_16 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_17 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_18 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_2 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_3 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_4 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_5 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_6 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_7 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_8 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_all1_9 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite margin_read1_ckbd calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite not_p1_or_p2_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite not_p1_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite p1_only_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite p1_or_p2_only_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite por_ins calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_10 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_11 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_12 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_13 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_14 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_15 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_16 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_2 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_3 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_4 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_5 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_6 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_7 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_8 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite program_ckbd_9 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite some_func_test calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite xcvr_fs_vilvih calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite xcvr_fs_vilvih_1 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite xcvr_fs_vilvih_2 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        suite xcvr_fs_vilvih_3 calls ac_tml.AcTest.FunctionalTest {
            "output" = "None";
            "testName" = "Functional";
        }

        flow ADDITIONAL_ERASE calls test_program.flows.prb1.prb1_main.ADDITIONAL_ERASE { }
        flow ADDITIONAL_ERASE_1 calls test_program.flows.prb1.prb1_main.ADDITIONAL_ERASE_1 { }
        flow DEEP_NESTED calls test_program.flows.prb1.prb1_main.DEEP_NESTED { }
        flow ERASE calls test_program.flows.prb1.prb1_main.ERASE { }
        flow ERASE_1 calls test_program.flows.prb1.prb1_main.ERASE_1 { }
    }

    execute {
        program_ckbd.execute();
        margin_read1_ckbd.execute();
        margin_read0_ckbd.execute();
        ERASE.execute();
        println("Should be v1");
        program_ckbd_1.execute();
        println("Should be v2");
        program_ckbd_2.execute();
        println("Should be v1");
        program_ckbd_3.execute();
        println("Should be v2");
        program_ckbd_4.execute();
        println("Should be a v1 test instance group");
        program_ckbd_5.execute();
        program_ckbd_6.execute();
        program_ckbd_7.execute();
        println("Should be a v2 test instance group");
        program_ckbd_8.execute();
        program_ckbd_9.execute();
        program_ckbd_10.execute();
        println("Should be a v1 test instance group");
        program_ckbd_11.execute();
        program_ckbd_12.execute();
        program_ckbd_13.execute();
        println("Should be a v2 test instance group");
        program_ckbd_14.execute();
        program_ckbd_15.execute();
        program_ckbd_16.execute();
        if (JOB == "P1") {
            p1_only_test.execute();
        } else {
        }
        if (JOB == "P1" or JOB == "P2") {
            p1_or_p2_only_test.execute();
        } else {
        }
        if (JOB == "P1") {
        } else {
            not_p1_test.execute();
        }
        if (JOB == "P1" or JOB == "P2") {
        } else {
            not_p1_or_p2_test.execute();
            another_not_p1_or_p2_test.execute();
        }
        println("Verify that a test with an external instance works");
        por_ins.execute();
        println("Verify that a request to use the current context works");
        if (JOB == "P1") {
            erase_all.execute();
            erase_all_1.execute();
            erase_all_2.execute();
        } else {
        }
        if (JOB == "P2") {
        } else {
            erase_all_3.execute();
        }
        erase_all_4.execute();
        margin_read1_all1.execute();
        margin_read1_all1_1.execute();
        margin_read1_all1_2.execute();
        margin_read1_all1_3.execute();
        margin_read1_all1_4.execute();
        margin_read1_all1_5.execute();
        println("Test if enable");
        if (DO_ERASE == 1) {
            erase_all_5.execute();
            erase_all_6.execute();
        } else {
        }
        println("Test unless enable");
        if (NO_EXTRA_ERASE == 1) {
        } else {
            erase_all_7.execute();
            erase_all_8.execute();
            erase_all_9.execute();
        }
        erase_all_10.execute();
        erase_all_11.execute();
        println("Test if_passed");
        erase_all_12.execute();
        erase_all_13.execute();
        if (ERASE_PASSED_1_PASSED == 1) {
            margin_read1_all1_6.execute();
        } else {
        }
        if (ERASE_PASSED_2_PASSED == 1) {
            margin_read1_all1_7.execute();
        } else {
        }
        println("Test unless_passed");
        erase_all_14.execute();
        erase_all_15.execute();
        if (ERASE_PASSED_3_FAILED == 1) {
            margin_read1_all1_8.execute();
        } else {
        }
        if (ERASE_PASSED_4_FAILED == 1) {
            margin_read1_all1_9.execute();
        } else {
        }
        println("Test if_failed");
        erase_all_16.execute();
        erase_all_17.execute();
        if (ERASE_FAILED_1_FAILED == 1) {
            margin_read1_all1_10.execute();
        } else {
        }
        if (ERASE_FAILED_2_FAILED == 1) {
            margin_read1_all1_11.execute();
        } else {
        }
        println("Test unless_failed");
        erase_all_18.execute();
        erase_all_19.execute();
        if (ERASE_FAILED_3_PASSED == 1) {
            margin_read1_all1_12.execute();
        } else {
        }
        if (ERASE_FAILED_4_PASSED == 1) {
            margin_read1_all1_13.execute();
        } else {
        }
        println("Test if_ran");
        erase_all_20.execute();
        ERASE_RAN_1_RAN = 1;
        erase_all_21.execute();
        ERASE_RAN_2_RAN = 1;
        if (ERASE_RAN_1_RAN == 1) {
            margin_read1_all1_14.execute();
        } else {
        }
        if (ERASE_RAN_2_RAN == 1) {
            margin_read1_all1_15.execute();
        } else {
        }
        println("Test unless_ran");
        erase_all_22.execute();
        ERASE_RAN_3_RAN = 1;
        erase_all_23.execute();
        ERASE_RAN_4_RAN = 1;
        if (ERASE_RAN_3_RAN == 1) {
        } else {
            margin_read1_all1_16.execute();
        }
        if (ERASE_RAN_4_RAN == 1) {
        } else {
            margin_read1_all1_17.execute();
        }
        println("Verify that job context wraps import");
        if (JOB == "FR") {
            ERASE_1.execute();
        } else {
        }
        println("Verify that job context wraps enable block within an import");
        if (JOB == "FR") {
            ADDITIONAL_ERASE.execute();
            ADDITIONAL_ERASE_1.execute();
        } else {
        }
        println("Verify that flow.cz works...");
        margin_read1_all1_18.execute();
        println("Verify that flow.cz works with enable words");
        if (USB_XCVR_CZ == 1) {
            xcvr_fs_vilvih.execute();
            xcvr_fs_vilvih_1.execute();
            xcvr_fs_vilvih_2.execute();
            xcvr_fs_vilvih_3.execute();
        } else {
        }
        println("Verify that MTO template works...");
        println("Speed binning example bug from video 5");
        if (G200_FAILED == 1) {
            G100_RAN = 1;
        } else {
        }
        if (G100_RAN == 1) {
            addBin(2);
        } else {
        }
        println("Test node optimization within an if_failed branch");
        some_func_test.execute();
        cc_test_0.execute();
        cc_test_1.execute();
        cc_test_2.execute();
        DEEP_NESTED.execute();
    }
}
