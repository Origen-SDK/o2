// Iterates through all 'pydata' objects and returns the first whose
// prename + name matches the given name.
function origen_get_pydata_by_name(name) {
  var retn;
  $.each($('.py.data'), function(i, pydata) {
    if ($(pydata).find('.sig-prename').text().concat($(pydata).find('.sig-name').text()) == name) {
      retn = $(pydata);
      return false;
    }
  });
  return retn;
}

// Iterates through all the 'internal references' generated by Sphinx on
// the page and updates the href target from #modules-<target> to <target>.variable
function origen_patch_pydata_internal_references(target) {
  $.each($('.reference.internal'), function(i, ref) {
    if ($(ref).attr('href').endsWith('#module-'.concat(target))) {
      $(ref).attr('href', '#'.concat(target).concat('.variable'));
      return false;
    }
  });
}

// Patches the pydata anchors after page generation.
// Used when a module and data member clash. no-indexing the data object
// leaves the data present, but removes all IDs and anchors.
// This will patch this back into the DOM under <target>.variable
function origen_patch_pydata_anchors(targets) {
  var e;

  $.each(targets, function(idx, anchor) {
    // PyData won't provide an ID to a no-indexed tag
    e = origen_get_pydata_by_name(anchor);
    $($(e).find('dt')).attr('id', anchor.concat('.variable'));
    $($(e).find('dt')).append('<a class="headerlink" href="#' + anchor + '.variable" title="Permalink to this definition">&#x00B6</a>');
    origen_patch_pydata_internal_references(anchor);
  });
}

$(function() {
  // Due to dynamic loading of the submenus in the 'Pages' heading, straight CSS is dumped down the order
  // and gets overridden by some JS.
  // Its possible to extend that specific class, but then the values need to be hard-coded, but it'd be
  // more preferable if we can instead inherit from a couple levels up
  // This'll still work as expected even if the theme is changed or if custom CSS to change some
  // of the colors around is brought in.
  $('#navbar-pages > ul')
    .children('li')
    .find('ul')
    .css(
      "background-color",
      $('#navbar-pages > ul').css("background-color")
    );
  
  // There's an issue that's been around for apparently a decade (based on SO question about it) where a fixed
  // navbar header covers up anchor links. The suggested work around is a CSS solution which adds an hidden block
  // before the anchor which pushes the anchor link down.
  // However, this block falls within the anchor's parent context, meaning that the CSS solution gets highlighted as
  // well during the permalink - and looks really bad.
  // Use a JQuery solution instead to move the location manually.
  // Note: 72 is hardcoded size of the navbar + darkly theme. May need to be updated if darkly is replaced.
  // See: https://stackoverflow.com/questions/49331572/offset-scroll-anchor-in-html-with-bootstrap-4-fixed-navbar
  $('.headerlink').click(function() {    
    $('html, body').animate({
      scrollTop: $($(this).parent()).offset().top - 72
    }, 100);
  });

  // Some of the other fixes break some stuff that was already working.
  // With the dynamic jumping introduced here, clicking on the same anchor twice, whose target
  // is within the same page, won't jump to the proper location. Reason is that the fix
  // for jumping to anchors from across pages relies on changes to the URL hash, which now
  // doesn't detect such a change.
  // So, another fix - instead of relying on the browser to append and jump to the hash,
  // we'll pretend like we just clicked on the anchor, which resolves this (and doesn't conflict
  // with the other issue)
  $('[class="reference internal"][href^="#"]').click(function(e) {
    e.preventDefault();
    console.log(this);
    $($($(this).attr("href").replace(/\./g, "\\.")).find('.headerlink')[0])[0].click();
  });

  // Patch any pydata anchors we need to.
  {%- if origen_module_pydata_clashes_js %}
  origen_patch_pydata_anchors({{ origen_module_pydata_clashes_js }});
  {% endif %}

  // Not sure why, but there's some issues with jumping to anchors. On the same page, things seem to work, but given a link, or on
  // a refresh, the anchor is lost.
  // This seems to fix it - basically wait until the page has loaded, then jump to the right spot.
  // Important! This should be run as late as possible so all other 'document.ready' blocks, 
  //  which may add content dynamically - including anchors or IDs - have a chance to run.
  if(window.location.hash) {
    e = document.getElementById(window.location.hash.substring(1));

    // Pretend that the click event occurred. This'll add the highlighting to dynamically added API objects as well.
    $($(e).find('.headerlink')[0])[0].click();
  }

  // // The above handles if a page comes in with a hash already in the URL. This will handle if the hash is changed from
  // // an internal anchor.
  // window.addEventListener("hashchange", function(e) {
  //   e = document.getElementById(window.location.hash.substring(1));
  //   $($(e).find('.headerlink')[0])[0].click();
  // });
});
