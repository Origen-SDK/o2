STIL 1.0;

Header {
  Title "Hello World";
  History {
    Ann {* blah blah 1 *} 
    Ann {* blah blah 2 *} 
  }
}

Signals {
  DIR In;
  OE_ In;
  A0 In; A1 In; A2 In; A3 In;
  A4 In; A5 In; A6 In; A7 In;
  B0 Out; B1 Out; B2 Out; B3 Out;
  B4 Out; B5 Out; B6 Out; B7 Out;
  Z0 Out {
    DefaultState Z;
  }
}

// Examples of a global (unnamed) SignalGroups block
SignalGroups { 
  a0_pin = 'A0';
  b0_pin = B0;
  abus_pins = 'A0+A1+A2+A3+A4+A5+A6+A7';
  bbus_pins = 'B0+B1+(B2+B3+B4)+B5+B6+B7';
  //bbus_odd = 'bbus_pins-B0-B2-B3-B4';
  xbus = 'DIR+OE_' { Base Hex wW; Alignment LSB; }
  abus_pins_alias = 'abus_pins';
}

// Example of a SignalGroups block for domain "quality"
SignalGroups quality {
  abus_pins = 'A0+A1+A2+A3';
}

Timing {
  WaveformTable defaults {
    Waveforms {
      allpins { xX { TMARK: 't_anchor' Z; } }
    }
  }
  WaveformTable wft1 {
    Period 'tper' ;
    InheritWaveformTable defaults;
    Waveforms {
      A7M { xX { 'TMARK+tx' Z; } }
      A7  { xX { 'TMARK+tx' Z; } }
      DIR { 01 { 'TMARK+tic1' D/U; } }
    }
  }
  WaveformTable misc {
    Waveforms {
      some_pins {
        InheritWaveform wft1.blah;
        xy { '0ns' D; '10ns' D/U; }
      }
      some_more_pins {
        ab { InheritWaveform wft1.bbus_aliases.1h; }
      }
    }
  }
}

PatternExec maintest_fast {
  Category fast;
  Selector type1;
  Timing simple_wave;
  PatternBurst one_functional;
}

PatternBurst one_functional {
  PatList { simple_pattern_ref;
            write_vecs { Start xbegin; } // 'start' for write_vecs only
            read_vecs  { Start xend;   } // 'start' for read_vecs only
  }
}

Spec tmode_spec {
  Category tmode {
    sp1 = ’50.00ns’;
    sp5 = ’40.00ns’;
    shmsp5= ’50.00ns’;
    sp10p= ’0.00ns’;
    sp10b= ’0.00ns’;
    dutyp= ’0.00ns’;
    dutyb= ’0.00ns’;
  }
  Category tmode_slow {
    sp1 {Min ’30.00ns’; Typ ’50.00ns’; Max ’70.00ns’;}
    sp5 {Min ’35.00ns’; Typ ’40.00ns’; Max ’55.00ns’;}
    shmsp5{Min ’0.00ns’; Typ ’23.00ns’; Max ’40.00ns’;}
    sp10p {Min ’0.00ns’; Typ ’0.00ns’; Max ’10.00ns’;}
    sp10b {Min ’-10.00ns’; Typ ’0.00ns’; Max ’0.00ns’;}
    dutyp {Min ’-10.00ns’; Typ ’0.00ns’; Max ’0.00ns’;}
    dutyb {Min ’-20.00ns’; Typ ’0.00ns’; Max ’0.00ns’;}
  }
}

Selector tmode_typ {
  sp1 Typ;
  sp5 Typ;
  shmsp5 Typ;
  sp10p Typ;
  sp10b Typ;
  dutyp Typ;
  dutyb Typ;
}
Selector tmode_mix {
  sp1 Min;
  sp5 Typ;
  shmsp5 Max;
  sp10p Typ;
  sp10b Typ;
  dutyp Min;
  dutyb Max;
}

ScanStructures {
  ScanChain chain1a {
    ScanLength 4;
    ScanIn si1;
    ScanOut so1;
    ScanMasterClock clk;
    ScanInversion 1;
    ScanCells ! a1 a2 a3a a4a;
  }
  ScanChain chain1b {
    ScanLength 4;
    ScanIn si1;
    ScanOut so2;
    ScanMasterClock clk;
    ScanInversion 1;
    ScanCells ! a1 a2 a3b ! a4b ! ;
  }
}

// Pattern blocks always come at the end of STIL file, this is not parsed
// into an AST and instead will be read and execute line-at-time, to enable
// handling of very large pattern files
Pattern blah {
    Ann {* blah blah 1 *} 
    Ann {* blah blah 1 *} 
    Ann {* blah blah 1 *} 
    Ann {* blah blah 1 *} 
    W wft1;
    V { ALL = 0110110110110110110111011; }
    // Test that loops containing 1 vector will be interpreted as a repeat
    Loop 10 {
      V { ALL = 0110110110110110110111011; }
    }
    V { ALL = 0110110110110110110111011; }
    Ann {* blah blah 1 *} 
    Vector { ALL = 0110110110110110110111011; }
    V { ALL = 0110110110110110110111011; }
}
